import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:csv/csv.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:kanban_board/models/archived_task.dart';
import 'package:kanban_board/services/firestore_service.dart';
import 'package:kanban_board/models/user.dart' as u;
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:share_plus/share_plus.dart';
import 'package:stop_watch_timer/stop_watch_timer.dart';

class ExportWidget extends StatefulWidget {
  const ExportWidget({super.key});

  @override
  State<ExportWidget> createState() => _ExportWidgetState();
}

class _ExportWidgetState extends State<ExportWidget> {
  bool processing = false;
  @override
  Widget build(BuildContext context) {
    return IconButton(
        onPressed: () async {
          setState(() {
            processing = true;
          });
          final querySnapshot = await FirestoreService().getArchives();

          List<List<dynamic>> rows = [];

          // Empty Rows
          rows.add([]);
          rows.add([]);
          // Info
          rows.add(['', 'Auto Generated by Kanban Board']);

          // Empty Rows
          rows.add([]);
          rows.add([]);
          // Header row
          List<String> headerRow = [
            '#',
            'Title',
            'Additional Notes',
            'Participants',
            'Time Taken',
            'Created Date',
            'Finished Date',
            'Task Created By',
            'Task Archived By',
          ];

          rows.add(headerRow);

          // Data Row
          int index = 1;
          await Future.forEach(querySnapshot.docs,
              (QueryDocumentSnapshot<Map<String, dynamic>>
                  queryDocumentSnapshot) async {
            final snapshot = queryDocumentSnapshot.data();
            snapshot['id'] = queryDocumentSnapshot.id;

            final archive = ArchivedTask.fromJson(snapshot);

            List<String> participantNames = [];

            // fetch participant names
            if (archive.users != null) {
              await Future.forEach(archive.users!.toList(),
                  (String userId) async {
                final participantSnapshot =
                    await FirestoreService().getUser(userId);
                final participant = u.User.fromFirestore(participantSnapshot);
                if (participantSnapshot.exists) {
                  participantNames.add(participant.name ?? '');
                }
              });
            }
            // Task created by
            String createByName = '';
            final createdBySnapshot =
                await FirestoreService().getUser(archive.createdBy ?? '');
            final createdBy = u.User.fromFirestore(createdBySnapshot);
            if (createdBySnapshot.exists) {
              createByName = createdBy.name ?? '';
            }
            // Task archived by
            String archivedByName = '';
            final archivedBySnapshot =
                await FirestoreService().getUser(archive.archivedBy ?? '');
            final archivedBy = u.User.fromFirestore(archivedBySnapshot);
            if (archivedBySnapshot.exists) {
              archivedByName = archivedBy.name ?? '';
            }
            // build archive row
            rows.add([
              index,
              archive.title,
              archive.notes,
              participantNames,
              StopWatchTimer.getDisplayTime(archive.timeTaken ?? 0,
                  milliSecond: false),
              archive.createdOn?.toDate().toLocal(),
              archive.completedOn?.toDate().toLocal(),
              createByName,
              archivedByName
            ]);

            index++;
          });

          String csv = const ListToCsvConverter().convert(rows);
          String fileName =
              'kanban_board_' + DateTime.now().toString().replaceAll(' ', '_');

          shareCsvFile(context, csv: csv, fileName: fileName);

          setState(() {
            processing = false;
          });
        },
        tooltip: 'Export archived tasks as csv file.',
        icon: processing
            ? const CupertinoActivityIndicator(
                color: Colors.white,
            )
            : Image.asset(
                'assets/csv_export.png',
                color: Colors.white,
                width: 48,
                height: 48,
              ));
  }

  Future<void> shareCsvFile(BuildContext context,
      {required String fileName, required String csv}) async {
    if (!(await Permission.storage.request().isGranted)) {
      Fluttertoast.showToast(msg: 'Storage permission is required.');
      return;
    }
    // Either the permission was already granted before or the user just granted it.
    if (Platform.isAndroid) {
      final output = await getExternalStorageDirectories();
      final file = File("${output![0].path}/$fileName.csv");
      await file.writeAsString(csv);

      Share.shareXFiles([XFile(file.path)], text: '$fileName.csv');
    } else if (Platform.isIOS) {
      final output = await getApplicationDocumentsDirectory();
      final file = File("${output.path}/$fileName.csv");
      await file.writeAsString(csv);
      // _onShare method:
      final box = context.findRenderObject() as RenderBox?;
      Share.shareXFiles(
        [XFile(file.path)],
        text: '$fileName.csv',
        sharePositionOrigin: box!.localToGlobal(Offset.zero) & box.size,
      );
    }
  }
}
